# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w9_YOj4Rcvjaym-VFaQKDZRYqqAwq5x3
"""

from flask import Flask, render_template, request, jsonify
import pickle
import numpy as np
import pandas as pd
import os

app = Flask(__name__)

# Load the model and preprocessing objects
try:
    with open('heart_failure_model.pkl', 'rb') as f:
        model = pickle.load(f)

    with open('scaler.pkl', 'rb') as f:
        scaler = pickle.load(f)

    with open('model_info.pkl', 'rb') as f:
        model_info = pickle.load(f)

    print("Model loaded successfully!")
    print(f"Model: {model_info['model_name']}")
    print(f"Accuracy: {model_info['accuracy']:.4f}")

except FileNotFoundError as e:
    print(f"Error loading model files: {e}")
    print("Please make sure you've run the model training notebook first!")
    model = None
    scaler = None
    model_info = None

# Feature names and their descriptions
FEATURE_INFO = {
    'age': {
        'name': 'Age',
        'description': 'Age of the patient (years)',
        'min': 40,
        'max': 95,
        'default': 60
    },
    'anaemia': {
        'name': 'Anaemia',
        'description': 'Does the patient have anaemia?',
        'options': {'0': 'No', '1': 'Yes'},
        'default': 0
    },
    'creatinine_phosphokinase': {
        'name': 'Creatinine Phosphokinase',
        'description': 'Level of CPK enzyme in blood (mcg/L)',
        'min': 23,
        'max': 7861,
        'default': 582
    },
    'diabetes': {
        'name': 'Diabetes',
        'description': 'Does the patient have diabetes?',
        'options': {'0': 'No', '1': 'Yes'},
        'default': 0
    },
    'ejection_fraction': {
        'name': 'Ejection Fraction',
        'description': 'Percentage of blood leaving heart at each contraction (%)',
        'min': 14,
        'max': 80,
        'default': 38
    },
    'high_blood_pressure': {
        'name': 'High Blood Pressure',
        'description': 'Does the patient have high blood pressure?',
        'options': {'0': 'No', '1': 'Yes'},
        'default': 0
    },
    'platelets': {
        'name': 'Platelets',
        'description': 'Platelets count in blood (kiloplatelets/mL)',
        'min': 25100,
        'max': 850000,
        'default': 263358
    },
    'serum_creatinine': {
        'name': 'Serum Creatinine',
        'description': 'Level of serum creatinine in blood (mg/dL)',
        'min': 0.5,
        'max': 9.4,
        'default': 1.1,
        'step': 0.1
    },
    'serum_sodium': {
        'name': 'Serum Sodium',
        'description': 'Level of serum sodium in blood (mEq/L)',
        'min': 113,
        'max': 148,
        'default': 137
    },
    'sex': {
        'name': 'Sex',
        'description': 'Sex of the patient',
        'options': {'0': 'Female', '1': 'Male'},
        'default': 1
    },
    'smoking': {
        'name': 'Smoking',
        'description': 'Does the patient smoke?',
        'options': {'0': 'No', '1': 'Yes'},
        'default': 0
    },
    'time': {
        'name': 'Follow-up Period',
        'description': 'Follow-up period (days)',
        'min': 4,
        'max': 285,
        'default': 130
    }
}

@app.route('/')
def index():
    """Render the main page with the prediction form."""
    return render_template('index.html', feature_info=FEATURE_INFO, model_info=model_info)

@app.route('/predict', methods=['POST'])
def predict():
    """Handle prediction requests."""
    try:
        if model is None:
            return jsonify({
                'error': 'Model not loaded. Please train the model first.',
                'success': False
            })

        # Get form data
        form_data = request.get_json() if request.is_json else request.form.to_dict()

        # Extract features in the correct order
        features = []
        feature_names = model_info['feature_names']

        for feature_name in feature_names:
            if feature_name in form_data:
                features.append(float(form_data[feature_name]))
            else:
                # Use default value if feature is missing
                features.append(FEATURE_INFO[feature_name]['default'])

        # Convert to numpy array
        features = np.array(features).reshape(1, -1)

        # Apply scaling if needed
        if model_info['uses_scaling']:
            features = scaler.transform(features)

        # Make prediction
        prediction = model.predict(features)[0]
        prediction_proba = model.predict_proba(features)[0]

        # Prepare result
        result = {
            'prediction': int(prediction),
            'prediction_text': 'High Risk of Heart Failure' if prediction == 1 else 'Low Risk of Heart Failure',
            'probability': {
                'no_death': float(prediction_proba[0]),
                'death': float(prediction_proba[1])
            },
            'confidence': float(max(prediction_proba)),
            'risk_level': get_risk_level(float(prediction_proba[1])),
            'success': True
        }

        return jsonify(result)

    except Exception as e:
        return jsonify({
            'error': f'Prediction error: {str(e)}',
            'success': False
        })

def get_risk_level(death_probability):
    """Determine risk level based on death probability."""
    if death_probability < 0.3:
        return {'level': 'Low', 'color': 'green', 'message': 'Low risk of heart failure'}
    elif death_probability < 0.6:
        return {'level': 'Medium', 'color': 'orange', 'message': 'Medium risk of heart failure'}
    else:
        return {'level': 'High', 'color': 'red', 'message': 'High risk of heart failure'}

@app.route('/model_info')
def model_info_route():
    """Return model information."""
    if model_info is None:
        return jsonify({'error': 'Model not loaded'})
    return jsonify(model_info)

@app.route('/health')
def health_check():
    """Health check endpoint."""
    return jsonify({
        'status': 'healthy',
        'model_loaded': model is not None,
        'version': '1.0.0'
    })

if __name__ == '__main__':
    # Create templates directory if it doesn't exist
    if not os.path.exists('templates'):
        os.makedirs('templates')

    # Check if model files exist
    required_files = ['heart_failure_model.pkl', 'scaler.pkl', 'model_info.pkl']
    missing_files = [f for f in required_files if not os.path.exists(f)]

    if missing_files:
        print("Warning: Missing model files:", missing_files)
        print("Please run the model training notebook first!")

    # Run the Flask app
    app.run(debug=True, host='0.0.0.0', port=5000)

